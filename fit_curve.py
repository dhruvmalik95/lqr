import scipy
from scipy import optimize
import numpy as np
import matplotlib.pyplot as plt

def f(x, C):
	return C/x

def g(x, C):
	return C/(x*x)


epsilon_list = [0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.025, 0.01]
m_list = np.array([150, 275, 850, 2800, 17000, 50000, 175000, 720000])

# print(scipy.optimize.curve_fit(f, epsilon_list, m_list))
# print(scipy.optimize.curve_fit(g, epsilon_list, m_list))

# s = 40
# plt.scatter(epsilon_list, m_list, c='r', s=s, label='true data')
# plt.scatter(epsilon_list, 13203.59573303*(1/np.array(epsilon_list)), c='b', s=s, label='6601/x')
# plt.scatter(epsilon_list, 146.04736858*(1/(np.array(epsilon_list)**2)), c='g', s=s, label='73/(x^2)')
# plt.xlabel('epsilon')
# plt.ylabel('Min value of m')
# plt.legend()
# plt.show()

def h(x, slope, intercept):
	return slope*x + intercept


epsilon_list = np.log([0.074999999999999997, 0.08154760296658807, 0.088666820661283785, 0.096407555834613842, 0.10482406781573682, 0.1139753528477388, 0.1239255576267225, 0.13474442894342661, 0.14650780257917592, 0.15929813488311875, 0.17320508075688748, 0.18832612209811314, 0.2047672511079216, 0.22264371325211244, 0.24208081508386864, 0.26321480259049795, 0.2861938162210505, 0.31117892928915863, 0.33834527702987061, 0.36788328422469518])
#M List To Test: [18000, 21760, 26306, 31801, 38445, 46476, 56185, 67922, 82111, 99264, 120000, 145068, 175373, 212009, 256298, 309839, 374564, 452811, 547404, 661758]
m_list = np.log([661758, 452811, 309839, 309839, 256298, 175373, 175373, 145068, 120000, 99264, 82111, 82111, 82111, 38445, 46476, 56185, 26306, 26306, 26306, 18000])
print(scipy.optimize.curve_fit(h, epsilon_list, m_list))

# plt.scatter(epsilon_list, m_list, c='r', s=40, label='true data')
# plt.xlabel("Log Of Epsilon")
# plt.ylabel("Log Of Min M")
#plt.show()

epsilon_list = np.array(np.log([0.025000000000000001, 0.027739236801696127, 0.030778610333622908, 0.034151006418859889, 0.037892914162759958, 0.042044820762685731, 0.046651649576840377, 0.051763246192068881, 0.057434917749851759, 0.063728031365963111, 0.070710678118654766, 0.078458409789675082, 0.087055056329612426, 0.096593632892484571, 0.10717734625362935, 0.11892071150027214, 0.13195079107728946, 0.14640856959456258, 0.16245047927124714, 0.18025009252216612]))
#M List To Test: [1000, 1364, 1862, 2540, 3466, 4729, 6452, 8803, 12011, 16388, 22361, 30509, 41628, 56798, 77496, 105737, 144270, 196845, 268580, 366456]
m_list = np.log(np.array([366456, 366456, 268580, 196845, 144270, 105737, 105737, 77496, 77496, 41628, 30509, 30509, 30509, 22361, 16388, 16388, 12011, 12011, 8803, 6452]))
print(scipy.optimize.curve_fit(h, epsilon_list, m_list))

# plt.scatter(epsilon_list, m_list, c='r', s=40, label='true data')
# plt.xlabel("Log Of Epsilon")
# plt.ylabel("Log Of Min M")
#plt.show()



"""
epsilon - 0.02 to 0.2
m - 1000 to 400000
"""

"""""""""""""""""""""""
"""""""""""""""""""""""
"""Functions to plot scaling vs. r"""
"""""""""""""""""""""""
"""""""""""""""""""""""

#this data gives fig1.png - 50 values of epsilon between 0.00001 and 0.1, exactly compute r, all at K_star
epsilon_list = np.log([9.9999999999999974e-06, 1.2022644346174118e-05, 1.445439770745925e-05, 1.7378008287493713e-05, 2.0892961308540328e-05, 2.51188643150957e-05, 3.0199517204020019e-05, 3.630780547700993e-05, 4.3651583224016322e-05, 5.2480746024976887e-05, 6.3095734448018832e-05, 7.5857757502917721e-05, 9.1201083935590123e-05, 0.00010964781961431739, 0.00013182567385563928, 0.00015848931924610949, 0.00019054607179632235, 0.00022908676527677428, 0.00027542287033381282, 0.00033113112148258622, 0.00039810717055349106, 0.00047863009232263057, 0.0005754399373371471, 0.00069183097091892419, 0.00083176377110265559, 0.00099999999999998072, 0.0012022644346173887, 0.0014454397707458974, 0.0017378008287493379, 0.0020892961308539926, 0.0025118864315095222, 0.0030199517204019441, 0.0036307805477009238, 0.0043651583224015491, 0.0052480746024975884, 0.0063095734448017629, 0.0075857757502916278, 0.0091201083935588383, 0.01096478196143153, 0.013182567385563676, 0.015848931924610649, 0.01905460717963187, 0.022908676527676992, 0.027542287033380755, 0.033113112148257989, 0.039810717055348346, 0.047863009232262145, 0.057543993733713612, 0.069183097091891091, 0.083176377110263974])
r_list = np.log([0.0011623999999999998, 0.0012745999999999999, 0.0013974999999999999, 0.0015324, 0.0016802, 0.0018422999999999998, 0.0020201, 0.002215, 0.0024286999999999998, 0.002663, 0.0029199, 0.0032015999999999998, 0.0035104999999999997, 0.0038491999999999997, 0.0042206, 0.0046277, 0.0050742, 0.0055638, 0.0061005, 0.0066891, 0.0073344, 0.0080419, 0.0088177, 0.0096683, 0.010601, 0.0116236, 0.012744799999999999, 0.0139741, 0.0153219, 0.016799599999999998, 0.0184197, 0.0201959, 0.0221432, 0.024277999999999997, 0.026618199999999998, 0.029183499999999998, 0.031995499999999996, 0.035077699999999996, 0.0384556, 0.0421575, 0.046214, 0.0506584, 0.055527, 0.060859399999999994, 0.06669839999999999, 0.0730904, 0.08008559999999999, 0.0877379, 0.0961051, 0.105249])

#this data gives fig2.png - same 50 values of epsilon between 0.00001 and 0.1, exactly compute r, all at K=4.0
r_list = np.log([7.7149e-05, 8.4592e-05, 9.275800000000001e-05, 0.000101703, 0.000111518, 0.00012227800000000002, 0.00013407400000000003, 0.00014700900000000003, 0.00016119200000000002, 0.00017674400000000003, 0.00019379700000000003, 0.000212493, 0.000232994, 0.00025547300000000004, 0.00028012100000000004, 0.000307147, 0.00033678, 0.000369272, 0.00040489800000000005, 0.00044396200000000006, 0.00048679500000000004, 0.0005337600000000001, 0.000585257, 0.000641721, 0.0007036330000000001, 0.000771518, 0.0008459530000000001, 0.000927568, 0.0010170580000000002, 0.0011151820000000002, 0.0012227720000000002, 0.0013407420000000002, 0.0014700930000000002, 0.0016119240000000003, 0.0017674380000000003, 0.0019379540000000002, 0.0021249220000000004, 0.0023299260000000004, 0.0025547070000000002, 0.0028011740000000005, 0.0030714160000000004, 0.0033677280000000004, 0.0036926240000000003, 0.004048858999999999, 0.004439456, 0.004867728, 0.0053373069999999995, 0.005852173, 0.0064166909999999995, 0.007035645])

plt.plot(epsilon_list, r_list)
plt.xlabel("Log Of Epsilon")
plt.ylabel("Log Of Max r")
plt.show()

print("Slope etc: " + str(scipy.optimize.curve_fit(h, epsilon_list, r_list)))


